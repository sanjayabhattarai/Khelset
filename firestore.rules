rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ==============================================================================
    // USERS COLLECTION
    // ==============================================================================
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null && resource.data.role == 'admin';
      
      // ==============================================================================
      // FAVORITES SUBCOLLECTION
      // ==============================================================================
      match /favorites/{eventId} {
        // Users can only manage their own favorites
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // ==============================================================================
    // EVENTS COLLECTION
    // ==============================================================================
    match /events/{eventId} {
      // Anyone can read events
      allow read: if true;
      
      // Only admins can create/update/delete events
      allow write: if request.auth != null && 
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // ==============================================================================
    // TEAMS COLLECTION - FIXED FOR REGISTRATION AND WEB ACCESS
    // ==============================================================================
    match /teams/{teamId} {
      // ✅ CRITICAL: Anyone can read teams (for both mobile and web)
      allow read: if true;
      
      // ✅ CRITICAL FIX: Allow authenticated users to create teams
      allow create: if request.auth != null &&
                       request.auth.uid == request.resource.data.captainId;
      
      // ✅ CRITICAL FIX: Allow team captains to update their own teams
      allow update: if request.auth != null && (
        // Team captain can update their team
        request.auth.uid == resource.data.captainId ||
        // Admin can update any team
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
      );
      
      // Only admins can delete teams
      allow delete: if request.auth != null && 
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // ==============================================================================
    // TEAM REGISTRATIONS COLLECTION
    // ==============================================================================
    match /team_registrations/{registrationId} {
      // Anyone can read team registrations
      allow read: if true;
      
      // Authenticated users can create team registrations
      allow create: if request.auth != null;
      
      // Team captains can update their registrations, admins can update any
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.captainId ||
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
      );
      
      // Team captains can delete their registrations, admins can delete any
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.captainId ||
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
      );
    }
    
    // ==============================================================================
    // PLAYERS COLLECTION - FIXED FOR REGISTRATION  
    // ==============================================================================
    match /players/{playerId} {
      // Anyone can read players
      allow read: if true;
      
      // ✅ CRITICAL FIX: Allow authenticated users to create players for their teams
      allow create: if request.auth != null;
      
      // ✅ CRITICAL FIX: Allow team captains to update players in their team
      allow update: if request.auth != null && (
        // Check if user is captain of the team this player belongs to
        exists(/databases/$(database)/documents/teams/$(resource.data.teamId)) &&
        get(/databases/$(database)/documents/teams/$(resource.data.teamId)).data.captainId == request.auth.uid ||
        // Admin can update any player
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
      );
      
      // ✅ CRITICAL FIX: Allow team captains to delete players from their team
      allow delete: if request.auth != null && (
        // Check if user is captain of the team this player belongs to
        exists(/databases/$(database)/documents/teams/$(resource.data.teamId)) &&
        get(/databases/$(database)/documents/teams/$(resource.data.teamId)).data.captainId == request.auth.uid ||
        // Admin can delete any player
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
      );
    }
    
    // ==============================================================================
    // MATCHES COLLECTION
    // ==============================================================================
    match /matches/{matchId} {
      // Anyone can read matches
      allow read: if true;
      
      // Only admins can create/update/delete matches
      allow write: if request.auth != null && 
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // ==============================================================================
      // DELIVERY HISTORY SUBCOLLECTION (COMMENTARY DATA)
      // ==============================================================================
      match /deliveries/{deliveryId} {
        // Anyone can read delivery history for commentary
        allow read: if true;
        
        // Only admins can create/update/delete delivery history
        allow write: if request.auth != null && 
                        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
      
      // Legacy support for old structure (can be removed later)
      match /innings1_deliveryHistory/{deliveryId} {
        allow read: if true;
        allow write: if request.auth != null && 
                        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
      
      match /innings2_deliveryHistory/{deliveryId} {
        allow read: if true;
        allow write: if request.auth != null && 
                        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
      
      // Undo stack subcollection
      match /undoStack/{undoId} {
        allow read: if true;
        allow write: if request.auth != null && 
                        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
    }
    
    // ==============================================================================
    // COMMENTARY COLLECTION
    // ==============================================================================
    match /commentary/{commentaryId} {
      // Anyone can read commentary
      allow read: if true;
      
      // Only admins can create/update/delete commentary
      allow write: if request.auth != null && 
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // ==============================================================================
    // NOTIFICATIONS COLLECTION
    // ==============================================================================
    match /notifications/{notificationId} {
      // Users can read their own notifications
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // Users can update their own notifications (mark as read)
      allow update: if request.auth != null && 
                       request.auth.uid == resource.data.userId &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);
      
      // Anyone authenticated can create notifications (for system-generated notifications)
      allow create: if request.auth != null;
      
      // Users can delete their own notifications
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // ==============================================================================
    // SUPPORTING COLLECTIONS FOR NOTIFICATIONS
    // ==============================================================================
    
    // Favorites collection - for tracking user favorites
    match /favorites/{favoriteId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Event participants - for tracking who to notify
    match /event_participants/{participantId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Match followers - for tracking match notifications
    match /match_followers/{followerId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // ==============================================================================
    // DEFAULT FALLBACK - DENY ALL
    // ==============================================================================
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
