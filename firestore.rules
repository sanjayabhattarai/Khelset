rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ==============================================================================
    // USERS COLLECTION
    // ==============================================================================
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null && resource.data.role == 'admin';
    }
    
    // ==============================================================================
    // EVENTS COLLECTION
    // ==============================================================================
    match /events/{eventId} {
      // Anyone can read events
      allow read: if true;
      
      // Only admins can create/update/delete events
      allow write: if request.auth != null && 
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // ==============================================================================
    // TEAMS COLLECTION - FIXED FOR REGISTRATION
    // ==============================================================================
    match /teams/{teamId} {
      // Anyone can read teams
      allow read: if true;
      
      // ✅ CRITICAL FIX: Allow authenticated users to create teams
      allow create: if request.auth != null &&
                       request.auth.uid == request.resource.data.captainId;
      
      // ✅ CRITICAL FIX: Allow team captains to update their own teams
      allow update: if request.auth != null && (
        // Team captain can update their team
        request.auth.uid == resource.data.captainId ||
        // Admin can update any team
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
      );
      
      // Only admins can delete teams
      allow delete: if request.auth != null && 
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // ==============================================================================
    // PLAYERS COLLECTION - FIXED FOR REGISTRATION  
    // ==============================================================================
    match /players/{playerId} {
      // Anyone can read players
      allow read: if true;
      
      // ✅ CRITICAL FIX: Allow authenticated users to create players for their teams
      allow create: if request.auth != null;
      
      // ✅ CRITICAL FIX: Allow team captains to update players in their team
      allow update: if request.auth != null && (
        // Check if user is captain of the team this player belongs to
        exists(/databases/$(database)/documents/teams/$(resource.data.teamId)) &&
        get(/databases/$(database)/documents/teams/$(resource.data.teamId)).data.captainId == request.auth.uid ||
        // Admin can update any player
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
      );
      
      // ✅ CRITICAL FIX: Allow team captains to delete players from their team
      allow delete: if request.auth != null && (
        // Check if user is captain of the team this player belongs to
        exists(/databases/$(database)/documents/teams/$(resource.data.teamId)) &&
        get(/databases/$(database)/documents/teams/$(resource.data.teamId)).data.captainId == request.auth.uid ||
        // Admin can delete any player
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
      );
    }
    
    // ==============================================================================
    // MATCHES COLLECTION
    // ==============================================================================
    match /matches/{matchId} {
      // Anyone can read matches
      allow read: if true;
      
      // Only admins can create/update/delete matches
      allow write: if request.auth != null && 
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // ==============================================================================
    // COMMENTARY COLLECTION
    // ==============================================================================
    match /commentary/{commentaryId} {
      // Anyone can read commentary
      allow read: if true;
      
      // Only admins can create/update/delete commentary
      allow write: if request.auth != null && 
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // ==============================================================================
    // DEFAULT FALLBACK - DENY ALL
    // ==============================================================================
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
